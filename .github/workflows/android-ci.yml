name: Android CI and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to compile (e.g., Debug, Release)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: |
          set -e
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
          elif [ -d "$ANDROID_HOME/tools/bin" ]; then
            yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses || true
          elif [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          else
            echo "Could not find sdkmanager, continuing without license acceptance..."
          fi

      - name: Clear Gradle cache and setup
        run: |
          # Remove any existing Gradle cache that might be corrupted
          rm -rf ~/.gradle/caches/
          rm -rf ~/.gradle/wrapper/
          rm -rf .gradle/
          
          # Create fresh Gradle directory
          mkdir -p ~/.gradle

      - name: Generate Gradle Wrapper (if not exists)
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew not found, generating wrapper..."
            gradle wrapper --gradle-version=8.5
            chmod +x ./gradlew
          else
            echo "gradlew found, making it executable..."
            chmod +x ./gradlew
          fi

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true
          gradle-home-cache-cleanup: true

      - name: Check project structure and tasks
        run: |
          echo "Project structure:"
          ls -la
          echo ""
          echo "Gradle version:"
          ./gradlew --version || echo "Failed to get Gradle version"
          echo ""
          echo "Gradle projects:"
          ./gradlew projects --no-daemon || echo "Failed to list projects"
          echo ""
          echo "Available build tasks:"
          ./gradlew tasks --group="build" --no-daemon || ./gradlew tasks --no-daemon | grep -i -E "(assemble|build|bundle)" || echo "No build tasks found"

      - name: Clean project
        run: |
          echo "Cleaning project..."
          ./gradlew clean --no-daemon --no-build-cache --stacktrace || echo "Clean task failed, continuing..."

      - name: Build with Gradle
        env:
          BUILD_VARIANT_INPUT: ${{ github.event.inputs.build_variant || 'Release' }}
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=false -Dorg.gradle.configureondemand=false"
        run: |
          set -e
          VARIANT_LOWER=$(echo "${{ env.BUILD_VARIANT_INPUT }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Attempting to build variant: ${{ env.BUILD_VARIANT_INPUT }}"
          echo "Variant lowercase: $VARIANT_LOWER"
          echo "Gradle opts: $GRADLE_OPTS"
          
          # Build without daemon and caching to avoid cache issues
          BUILD_SUCCESS=false
          
          # First try variant-specific tasks
          for task in "assemble${{ env.BUILD_VARIANT_INPUT }}" "assemble${VARIANT_LOWER}"; do
            if ./gradlew tasks --all --no-daemon | grep -q "$task\b"; then
              echo "Building with $task..."
              if ./gradlew $task --no-daemon --no-build-cache --stacktrace --info; then
                BUILD_SUCCESS=true
                break
              else
                echo "Task $task failed, trying next..."
              fi
            fi
          done
          
          # If variant-specific tasks failed, try generic tasks
          if [ "$BUILD_SUCCESS" = false ]; then
            for task in "assembleRelease" "assembleDebug" "assemble" "build"; do
              if ./gradlew tasks --all --no-daemon | grep -q "$task\b"; then
                echo "Building with $task..."
                if ./gradlew $task --no-daemon --no-build-cache --stacktrace --info; then
                  BUILD_SUCCESS=true
                  break
                else
                  echo "Task $task failed, trying next..."
                fi
              fi
            done
          fi
          
          if [ "$BUILD_SUCCESS" = false ]; then
            echo "All build attempts failed!"
            echo "Trying one last time with basic assemble task..."
            ./gradlew assemble --no-daemon --no-build-cache --stacktrace --debug || exit 1
          fi

      - name: Find built files
        id: find_files
        run: |
          echo "Searching for build artifacts..."
          
          # Find APK files
          APK_FILES=$(find . -name "*.apk" -type f -not -path "*/unaligned/*" 2>/dev/null || true)
          if [ -n "$APK_FILES" ]; then
            echo "Found APK files:"
            echo "$APK_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                echo "  $file ($(du -h "$file" | cut -f1))"
              fi
            done
            # Get the first APK file
            APK_PATH=$(echo "$APK_FILES" | head -1)
            if [ -f "$APK_PATH" ]; then
              echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
              echo "Selected APK: $APK_PATH"
            else
              echo "APK_PATH=" >> $GITHUB_ENV
            fi
          else
            echo "No APK files found"
            echo "APK_PATH=" >> $GITHUB_ENV
          fi
          
          # Find AAB files
          AAB_FILES=$(find . -name "*.aab" -type f 2>/dev/null || true)
          if [ -n "$AAB_FILES" ]; then
            echo "Found AAB files:"
            echo "$AAB_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                echo "  $file ($(du -h "$file" | cut -f1))"
              fi
            done
            # Get the first AAB file
            AAB_PATH=$(echo "$AAB_FILES" | head -1)
            if [ -f "$AAB_PATH" ]; then
              echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
              echo "Selected AAB: $AAB_PATH"
            else
              echo "AAB_PATH=" >> $GITHUB_ENV
            fi
          else
            echo "No AAB files found"
            echo "AAB_PATH=" >> $GITHUB_ENV
          fi
          
          # Debug: Show build outputs directory structure
          echo ""
          echo "Build outputs structure:"
          find . -path "*/build/outputs*" -type d 2>/dev/null | head -10 || echo "No build outputs directories found"
          
          # Show what's actually in the outputs directories
          echo ""
          echo "Contents of build outputs:"
          find . -path "*/build/outputs*" -type f 2>/dev/null | head -20 || echo "No files in build outputs"

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          if [ -n "${{ env.APK_PATH }}" ] && [ -f "${{ env.APK_PATH }}" ]; then
            echo "✅ APK file exists: ${{ env.APK_PATH }}"
            ls -la "${{ env.APK_PATH }}"
          else
            echo "❌ No valid APK file found"
          fi
          
          if [ -n "${{ env.AAB_PATH }}" ] && [ -f "${{ env.AAB_PATH }}" ]; then
            echo "✅ AAB file exists: ${{ env.AAB_PATH }}"
            ls -la "${{ env.AAB_PATH }}"
          else
            echo "ℹ️ No AAB file found (this is normal if bundle task wasn't run)"
          fi

      - name: Create Release Tag
        id: create_tag
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Created tag: $TAG_NAME"

      - name: Prepare release files
        id: prepare_files
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          # Create a directory for release files
          mkdir -p release_files
          
          RELEASE_FILES=""
          
          if [ -n "${{ env.APK_PATH }}" ] && [ -f "${{ env.APK_PATH }}" ]; then
            # Copy APK with a cleaner name
            APK_NAME="app-${{ github.event.inputs.build_variant || 'release' }}.apk"
            cp "${{ env.APK_PATH }}" "release_files/$APK_NAME"
            RELEASE_FILES="release_files/$APK_NAME"
            echo "Prepared APK: release_files/$APK_NAME"
          fi
          
          if [ -n "${{ env.AAB_PATH }}" ] && [ -f "${{ env.AAB_PATH }}" ]; then
            # Copy AAB with a cleaner name
            AAB_NAME="app-${{ github.event.inputs.build_variant || 'release' }}.aab"
            cp "${{ env.AAB_PATH }}" "release_files/$AAB_NAME"
            RELEASE_FILES="$RELEASE_FILES release_files/$AAB_NAME"
            echo "Prepared AAB: release_files/$AAB_NAME"
          fi
          
          echo "RELEASE_FILES=$RELEASE_FILES" >> $GITHUB_ENV
          echo "Release files prepared: $RELEASE_FILES"

      - name: Create GitHub Release
        id: create_release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android Release ${{ env.TAG_NAME }}"
          body: |
            ## Android Release ${{ env.TAG_NAME }}
            
            **Build Information:**
            - Build Variant: ${{ github.event.inputs.build_variant || 'Release' }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Triggered by: ${{ github.event_name }}
            - Built on: ${{ runner.os }}
            
            **Files included:**
            ${{ env.APK_PATH && '✅ APK file' || '❌ No APK file' }}
            ${{ env.AAB_PATH && '✅ AAB file' || 'ℹ️ No AAB file' }}
            
            ---
            *This release was automatically generated by GitHub Actions*
          draft: false
          prerelease: false
          files: ${{ env.RELEASE_FILES }}
          fail_on_unmatched_files: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Post build cleanup
        if: always()
        run: |
          echo "Post job cleanup..."
          # Stop any remaining Gradle daemons
          ./gradlew --stop || true
          # Clean up temporary files
          rm -rf release_files || true
          echo "Cleanup completed."

      - name: Upload build artifacts (if release failed)
        if: failure() && (env.APK_PATH != '' || env.AAB_PATH != '')
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            ${{ env.APK_PATH }}
            ${{ env.AAB_PATH }}
          retention-days: 7
