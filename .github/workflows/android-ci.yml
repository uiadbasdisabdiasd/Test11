name: Android CI and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to compile (e.g., Debug, Release)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: |
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          elif [ -d "$ANDROID_HOME/tools/bin" ]; then
            yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          elif [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          else
            echo "Could not find sdkmanager"
            exit 1
          fi

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Generate Gradle Wrapper (if not exists)
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew not found, generating wrapper..."
            gradle wrapper --gradle-version=8.2
            chmod +x ./gradlew
          else
            echo "gradlew found, making it executable..."
            chmod +x ./gradlew
          fi

      - name: Check project structure and tasks
        run: |
          echo "Project structure:"
          ls -la
          echo ""
          echo "Gradle projects:"
          ./gradlew projects
          echo ""
          echo "All available tasks:"
          ./gradlew tasks --all
          echo ""
          echo "Android specific tasks:"
          ./gradlew tasks --all | grep -i -E "(assemble|build|bundle)" || echo "No Android tasks found"

      - name: Build with Gradle
        env:
          BUILD_VARIANT_INPUT: ${{ github.event.inputs.build_variant || 'Release' }}
        run: |
          VARIANT_LOWER=$(echo "${{ env.BUILD_VARIANT_INPUT }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Attempting to build variant: ${{ env.BUILD_VARIANT_INPUT }}"
          echo "Variant lowercase: $VARIANT_LOWER"
          
          # For single module projects, use root project tasks
          if ./gradlew tasks --all | grep -q "assemble${{ env.BUILD_VARIANT_INPUT }}"; then
            echo "Building with assemble${{ env.BUILD_VARIANT_INPUT }}..."
            ./gradlew assemble${{ env.BUILD_VARIANT_INPUT }} --no-daemon --stacktrace
          elif ./gradlew tasks --all | grep -q "assemble${VARIANT_LOWER}"; then
            echo "Building with assemble${VARIANT_LOWER}..."
            ./gradlew assemble${VARIANT_LOWER} --no-daemon --stacktrace
          elif ./gradlew tasks --all | grep -q "assembleRelease"; then
            echo "Building with assembleRelease..."
            ./gradlew assembleRelease --no-daemon --stacktrace
          elif ./gradlew tasks --all | grep -q "assembleDebug"; then
            echo "Building with assembleDebug..."
            ./gradlew assembleDebug --no-daemon --stacktrace
          elif ./gradlew tasks --all | grep -q "build"; then
            echo "Building with build task..."
            ./gradlew build --no-daemon --stacktrace
          else
            echo "No suitable build task found, trying generic assemble..."
            ./gradlew assemble --no-daemon --stacktrace
          fi

      - name: Find built files
        run: |
          echo "Searching for APK files..."
          find . -name "*.apk" -type f -exec ls -la {} \;
          echo ""
          echo "Searching for AAB files..."
          find . -name "*.aab" -type f -exec ls -la {} \;
          echo ""
          echo "Build outputs structure:"
          find . -path "*/build/outputs*" -type d -exec ls -la {} \; || echo "No build outputs found"
          echo ""
          echo "Full build directory structure:"
          find . -name "build" -type d -exec find {} -type f -name "*.apk" -o -name "*.aab" \; 2>/dev/null || echo "No build artifacts found"

      - name: Create Release Tag
        id: create_tag
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Find and set APK path
        id: find_apk
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          VARIANT_LOWER=$(echo "${{ github.event.inputs.build_variant || 'release' }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Searching for APK files..."
          APK_PATH=""
          
          # Common locations for single module projects
          POSSIBLE_PATHS=(
            "./build/outputs/apk/${VARIANT_LOWER}/*.apk"
            "./build/outputs/apk/${VARIANT_LOWER}/Test11-${VARIANT_LOWER}.apk"
            "./build/outputs/apk/${VARIANT_LOWER}/app-${VARIANT_LOWER}.apk"
            "./build/outputs/apk/${VARIANT_LOWER}/*.apk"
            "./app/build/outputs/apk/${VARIANT_LOWER}/*.apk"
          )
          
          for path_pattern in "${POSSIBLE_PATHS[@]}"; do
            if ls $path_pattern 1> /dev/null 2>&1; then
              APK_PATH=$(ls $path_pattern | head -1)
              break
            fi
          done
          
          # Fallback: search recursively
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find . -name "*.apk" -type f | head -1)
          fi
          
          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
            echo "Found APK at: $APK_PATH"
          else
            echo "No APK file found"
            echo "APK_PATH=" >> $GITHUB_ENV
          fi

      - name: Find and set AAB path
        id: find_aab
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          VARIANT_LOWER=$(echo "${{ github.event.inputs.build_variant || 'release' }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Searching for AAB files..."
          AAB_PATH=""
          
          # Common locations for single module projects
          POSSIBLE_PATHS=(
            "./build/outputs/bundle/${VARIANT_LOWER}/*.aab"
            "./build/outputs/bundle/${VARIANT_LOWER}/Test11-${VARIANT_LOWER}.aab"
            "./build/outputs/bundle/${VARIANT_LOWER}/app-${VARIANT_LOWER}.aab"
            "./app/build/outputs/bundle/${VARIANT_LOWER}/*.aab"
          )
          
          for path_pattern in "${POSSIBLE_PATHS[@]}"; do
            if ls $path_pattern 1> /dev/null 2>&1; then
              AAB_PATH=$(ls $path_pattern | head -1)
              break
            fi
          done
          
          # Fallback: search recursively
          if [ -z "$AAB_PATH" ]; then
            AAB_PATH=$(find . -name "*.aab" -type f | head -1)
          fi
          
          if [ -n "$AAB_PATH" ] && [ -f "$AAB_PATH" ]; then
            echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
            echo "Found AAB at: $AAB_PATH"
          else
            echo "No AAB file found - this is normal if bundle task wasn't run"
            echo "AAB_PATH=" >> $GITHUB_ENV
          fi

      - name: Upload Release Assets
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.APK_PATH }}
            ${{ env.AAB_PATH }}
          fail_on_unmatched_files: false
