name: Android CI and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to compile (e.g., Debug, Release)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Or 'adopt' or other JDK provider
          java-version: '17' # Ensure this matches your project's Java version

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        # with:
        #   api-level: 34 # Optional: specify API level
        #   ndk-version: # Optional: specify NDK version if needed
        #   cmake-version: # Optional: specify CMake version if needed

      - name: Accept Android SDK licenses
        run: |
          export JAVA_OPTS="--add-modules java.xml.bind"
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          elif [ -d "$ANDROID_HOME/tools/bin" ]; then
            yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          else
            echo "Could not find sdkmanager"
            exit 1
          fi

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.2' # Specify a recent, compatible Gradle version. Check project's build.gradle for hints if any.

      - name: Build with Gradle
        env:
          BUILD_VARIANT_INPUT: ${{ github.event.inputs.build_variant || 'Release' }} # Default to Release for non-dispatch events
        run: gradle :app:assemble${{ env.BUILD_VARIANT_INPUT }} --no-daemon
        # Add --no-daemon to ensure Gradle exits cleanly in CI environments.
        # Note: This assumes you have set up signing configurations in your app's build.gradle.
        # If not, this will build an unsigned release APK/AAB.
        # For a signed release, you'd need to handle keystore and credentials securely.

      - name: Create Release Tag
        id: create_tag
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (APK)
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_VARIANT_INPUT_LOWER: ${{ github.event_name == 'workflow_dispatch' && lower(github.event.inputs.build_variant) || lower('Release') }}
          APP_NAME: MusicPlayer
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app/build/outputs/apk/${{ env.BUILD_VARIANT_INPUT_LOWER }}/app-${{ env.BUILD_VARIANT_INPUT_LOWER }}.apk
          asset_name: ${{ env.APP_NAME }}-${{ env.TAG_NAME }}-${{ env.BUILD_VARIANT_INPUT_LOWER }}.apk
          asset_content_type: application/vnd.android.package-archive

      # Uncomment to upload AAB as well
      - name: Upload Release Asset (AAB)
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        # if: success() && steps.create_release.outputs.upload_url # Keep conditional if only for releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_VARIANT_INPUT_LOWER: ${{ github.event_name == 'workflow_dispatch' && lower(github.event.inputs.build_variant) || lower('Release') }}
          APP_NAME: MusicPlayer
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app/build/outputs/bundle/${{ env.BUILD_VARIANT_INPUT_LOWER }}/app-${{ env.BUILD_VARIANT_INPUT_LOWER }}.aab
          asset_name: ${{ env.APP_NAME }}-${{ env.TAG_NAME }}-${{ env.BUILD_VARIANT_INPUT_LOWER }}.aab
          asset_content_type: application/zip # Corrected AAB content type
