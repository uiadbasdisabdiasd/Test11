name: Android CI and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to compile (e.g., Debug, Release)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: |
          set -e
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
          elif [ -d "$ANDROID_HOME/tools/bin" ]; then
            yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses || true
          elif [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          else
            echo "Could not find sdkmanager, continuing without license acceptance..."
          fi

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Generate Gradle Wrapper (if not exists)
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew not found, generating wrapper..."
            gradle wrapper --gradle-version=8.2
            chmod +x ./gradlew
          else
            echo "gradlew found, making it executable..."
            chmod +x ./gradlew
          fi

      - name: Check project structure and tasks
        run: |
          echo "Project structure:"
          ls -la
          echo ""
          echo "Gradle projects:"
          ./gradlew projects || echo "Failed to list projects"
          echo ""
          echo "Available build tasks:"
          ./gradlew tasks --group="build" || ./gradlew tasks | grep -i -E "(assemble|build|bundle)" || echo "No build tasks found"

      - name: Build with Gradle
        env:
          BUILD_VARIANT_INPUT: ${{ github.event.inputs.build_variant || 'Release' }}
        run: |
          set -e
          VARIANT_LOWER=$(echo "${{ env.BUILD_VARIANT_INPUT }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Attempting to build variant: ${{ env.BUILD_VARIANT_INPUT }}"
          echo "Variant lowercase: $VARIANT_LOWER"
          
          # Clean first
          ./gradlew clean --no-daemon
          
          # Try different build tasks in order of preference
          BUILD_SUCCESS=false
          
          # First try variant-specific tasks
          for task in "assemble${{ env.BUILD_VARIANT_INPUT }}" "assemble${VARIANT_LOWER}"; do
            if ./gradlew tasks --all | grep -q "$task\b"; then
              echo "Building with $task..."
              if ./gradlew $task --no-daemon --stacktrace --info; then
                BUILD_SUCCESS=true
                break
              fi
            fi
          done
          
          # If variant-specific tasks failed, try generic tasks
          if [ "$BUILD_SUCCESS" = false ]; then
            for task in "assembleRelease" "assembleDebug" "assemble" "build"; do
              if ./gradlew tasks --all | grep -q "$task\b"; then
                echo "Building with $task..."
                if ./gradlew $task --no-daemon --stacktrace --info; then
                  BUILD_SUCCESS=true
                  break
                fi
              fi
            done
          fi
          
          if [ "$BUILD_SUCCESS" = false ]; then
            echo "All build attempts failed!"
            exit 1
          fi

      - name: Find built files
        id: find_files
        run: |
          echo "Searching for build artifacts..."
          
          # Find APK files
          APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null || true)
          if [ -n "$APK_FILES" ]; then
            echo "Found APK files:"
            echo "$APK_FILES" | while read -r file; do
              echo "  $file ($(du -h "$file" | cut -f1))"
            done
            # Get the first APK file
            APK_PATH=$(echo "$APK_FILES" | head -1)
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          else
            echo "No APK files found"
            echo "APK_PATH=" >> $GITHUB_ENV
          fi
          
          # Find AAB files
          AAB_FILES=$(find . -name "*.aab" -type f 2>/dev/null || true)
          if [ -n "$AAB_FILES" ]; then
            echo "Found AAB files:"
            echo "$AAB_FILES" | while read -r file; do
              echo "  $file ($(du -h "$file" | cut -f1))"
            done
            # Get the first AAB file
            AAB_PATH=$(echo "$AAB_FILES" | head -1)
            echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
          else
            echo "No AAB files found"
            echo "AAB_PATH=" >> $GITHUB_ENV
          fi
          
          # Debug: Show build outputs directory structure
          echo ""
          echo "Build outputs structure:"
          find . -path "*/build/outputs*" -type d 2>/dev/null | head -10 || echo "No build outputs directories found"

      - name: Create Release Tag
        id: create_tag
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Created tag: $TAG_NAME"

      - name: Create GitHub Release
        id: create_release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android Release ${{ env.TAG_NAME }}"
          body: |
            ## Android Release ${{ env.TAG_NAME }}
            
            **Build Information:**
            - Build Variant: ${{ github.event.inputs.build_variant || 'Release' }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Triggered by: ${{ github.event_name }}
            
            **Files included:**
            ${{ env.APK_PATH && '- APK file' || '' }}
            ${{ env.AAB_PATH && '- AAB file' || '' }}
          draft: false
          prerelease: false
          files: |
            ${{ env.APK_PATH }}
            ${{ env.AAB_PATH }}
          fail_on_unmatched_files: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Post Set up Gradle
        if: always()
        run: |
          echo "Post job cleanup."
          echo "Stopping all Gradle daemons before saving Gradle User Home state"
          ./gradlew --stop || true
