name: Android CI and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant to compile (e.g., Debug, Release)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: |
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          elif [ -d "$ANDROID_HOME/tools/bin" ]; then
            yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          elif [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
            yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          else
            echo "Could not find sdkmanager"
            exit 1
          fi

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Generate Gradle Wrapper (if not exists)
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew not found, generating wrapper..."
            gradle wrapper --gradle-version=8.2
            chmod +x ./gradlew
          else
            echo "gradlew found, making it executable..."
            chmod +x ./gradlew
          fi

      - name: Check project structure
        run: |
          echo "Project structure:"
          ls -la
          echo "Gradle projects:"
          ./gradlew projects

      - name: Build with Gradle
        env:
          BUILD_VARIANT_INPUT: ${{ github.event.inputs.build_variant || 'Release' }}
        run: |
          echo "Available tasks:"
          ./gradlew tasks --all | grep -i assemble
          
          # Try different project structures
          if ./gradlew projects | grep -q ":app"; then
            echo "Building :app module..."
            ./gradlew :app:assemble${{ env.BUILD_VARIANT_INPUT }} --no-daemon
          elif [ -d "app" ]; then
            echo "Building app directory..."
            ./gradlew app:assemble${{ env.BUILD_VARIANT_INPUT }} --no-daemon
          else
            echo "Building root project..."
            ./gradlew assemble${{ env.BUILD_VARIANT_INPUT }} --no-daemon
          fi

      - name: Find built files
        run: |
          echo "Searching for APK files..."
          find . -name "*.apk" -type f
          echo "Searching for AAB files..."
          find . -name "*.aab" -type f
          echo "Build outputs structure:"
          find . -path "*/build/outputs*" -type d

      - name: Create Release Tag
        id: create_tag
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Find and set APK path
        id: find_apk
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          VARIANT_LOWER=$(echo "${{ github.event.inputs.build_variant || 'release' }}" | tr '[:upper:]' '[:lower:]')
          
          # Search for APK files in common locations
          APK_PATH=""
          
          # Try app module first
          if [ -f "./app/build/outputs/apk/${VARIANT_LOWER}/app-${VARIANT_LOWER}.apk" ]; then
            APK_PATH="./app/build/outputs/apk/${VARIANT_LOWER}/app-${VARIANT_LOWER}.apk"
          elif [ -f "./app/build/outputs/apk/${VARIANT_LOWER}/app-${VARIANT_LOWER}-unsigned.apk" ]; then
            APK_PATH="./app/build/outputs/apk/${VARIANT_LOWER}/app-${VARIANT_LOWER}-unsigned.apk"
          else
            # Search recursively for any APK
            APK_PATH=$(find . -name "*.apk" -type f | head -1)
          fi
          
          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
            echo "Found APK at: $APK_PATH"
          else
            echo "No APK file found"
            echo "APK_PATH=" >> $GITHUB_ENV
          fi

      - name: Find and set AAB path
        id: find_aab
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        run: |
          VARIANT_LOWER=$(echo "${{ github.event.inputs.build_variant || 'release' }}" | tr '[:upper:]' '[:lower:]')
          
          # Search for AAB files in common locations
          AAB_PATH=""
          
          # Try app module first
          if [ -f "./app/build/outputs/bundle/${VARIANT_LOWER}/app-${VARIANT_LOWER}.aab" ]; then
            AAB_PATH="./app/build/outputs/bundle/${VARIANT_LOWER}/app-${VARIANT_LOWER}.aab"
          else
            # Search recursively for any AAB
            AAB_PATH=$(find . -name "*.aab" -type f | head -1)
          fi
          
          if [ -n "$AAB_PATH" ] && [ -f "$AAB_PATH" ]; then
            echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
            echo "Found AAB at: $AAB_PATH"
          else
            echo "No AAB file found"
            echo "AAB_PATH=" >> $GITHUB_ENV
          fi

      - name: Upload Release Assets
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_variant == 'Release')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.APK_PATH }}
            ${{ env.AAB_PATH }}
          fail_on_unmatched_files: false
